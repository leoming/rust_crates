# This is a template for completing a CRAB audit of 3rd party Rust packages.
# Read more at go/rust-crab
# For more information about the toml format, see https://toml.io/

# Required [string]: Crate that is being reviewed
crate_name =

# Required [string]: Version of crate being reviewed
version =

# Required [string]: Reviewed by this team.
reviewed-by-team =

# Optional [array(string)]: Features being reviewed. If left out, default is
# assumed.  It is recommended that you expand "default" below if there are a
# non-trivial number of features or some features have non-trivial implications
# (for example if they control the type of crypto used).
# features = [ "default" ]

# Optional [string]: A blanket denial for this package. The value for this key
# should be an explanation for why it is denied.
# deny = "Explain why this is denied"

# Common checks required across all CRAB metadata definitions
[common]

# Required [boolean]: Cursory check to make sure the code is not actively doing
# anything malicious like mining cryptocurrency or exfiltrating ~/.ssh, etc.
# This doesn't need to be a deep audit of every line of the code. At a high
# level, this is requesting that the importer verify:
# - Whether the `Cargo.toml`'s dependencies seem reasonable, given the purpose
#   of a crate (`structopt` probably shouldn't import `tokio`). If any
#   dependency sticks out as questionable, the reviewer is expected to quickly
#   verify what the crate is doing with said dep.
# - Whether there is _obviously_ any significant amount of code which seems to
#   do things wildly unrelated to the crate's purpose (`structopt` probably
#   shouldn't have `Command::new("sudo").args(&["rm", "-rf", "/"]).status()`).
#   Unjustified network access is also a big red flag.
#
# Final emphasis: this is a _cursory check_. Small crates (<1KLOC) should take
# no more than a few minutes to glance over. You are not expected to have a deep
# understanding of the inner-workings of this crate to set this bit.
code_is_not_malicious =

# Required [boolean]: This is just whether the crate has any unsafe blocks, or
# implements any unsafe traits. Unsafe blocks expanded from macros do not count,
# unless the macro with the unsafe block is defined in the crate. For example,
# any of the following constructs should cause `has_unsafe_code` to be true:
# ```
# // ---
# unsafe impl Foo for Bar {}
# // ---
# fn foo() { unsafe { bar() } }
# // ---
# macro_rules! foo {
#   () => unsafe {{ bar(); }}
# }
# ```
# TODO(b/250912123): Automate this.
has_unsafe_code =

# Required [boolean]: Whether the crate attempts to directly implement any
# cryptographic algorithms. Reviewers are not required to know the
# inner-workings of every crypto-like algorithm in order to audit for this;
# skimming the crate's code to verify that it doesn't specifically call out
# things like "// implement Whirlpool inline with a hack to improve speed on my
# Athlon X3," is sufficient.
implements_crypto =

# Optional [int]: Code is readable, not overly complicated and of comparable
# quality to first-party code. If the maintainer disappeared, this could be
# changed or maintained by first-party engineers with confidence.
# Acceptable values: 0 - 4 (0 = No, 1 = Borderline, 2 = Solid, 3 = Outstanding)
# maintainable_code = 0

# Optional [boolean]: Does this package have a good api?
# good_api = false

# Optional [boolean]: The code is well documented according to a set of
# guidelines.
# good_docs = false

# Optional [int]: Whether the crate has sufficient test coverage.
# Acceptable values: 0 - 3 (0 = No, 1 = Borderline, 2 = Solid, 3 = Outstanding)
# testing_status = 0

# Optional [boolean]: This gauges whether the crate
# - Has multiple maintainers
# - Has well known maintainers
# - Has well known reverse dependencies
# - Has activity on the repo
# reasonably_maintained = false

# Optional [boolean]: This is just whether the crate has any unsafe blocks.
# has_unsafe_code = false

# Optional [boolean]: Is there a build script? If yes, there is a required
# sub-section with additional details.
# build_script = false

# Optional [boolean]: Is this crate a proc macro? If yes, there is a required
# sub-section with additional details.
# proc_macro = false

# Optional [boolean]: Has the unsafe code been carefully reviewed for soundness?
# This may require pinging the Unsafe Rust Crabal.
# unsafe_code_is_sound = false

# Optional [boolean]: Whether or not this crate is appropriate for deployment.
# An example of something that might not be appropriate would be a code
# formatter.
# dev_dependency_only = false

# Uncomment the next block if build_script is true
# [common.build_script_details]
#
# # Optional [boolean]: Is the build script deterministic?
# # deterministic = false
#
# # Optional [boolean]: Can it cleanly cross compile?
# # is_cross_compile_clean = false
#
# # Optional [list]: What syscall types are used?
# # syscall_types_used = [ ]
#
# # Optional [dict]: Purpose of the build script. The following keys must be
# # present in the dict:
# # - codegen [boolean]: Is the build script used purely for codegen?
# # - cfg_algebra [boolean]: Does the build generate cfg options based on
# #                          inputs?
# # - links_libs [list]: List of libraries the build script links
# # - builds_libs [list]: List of libraries the build script builds
# # - misc [boolean]: Above keys don't capture the build script's purpose.
# # [common.build_script_details.purpose]
# # codegen = false
# # cfg_algebra = false
# # links_libs = []
# # builds_libs = []
# # misc = false
# #

# Uncomment the next block if proc_macro is true
# [common.proc_macro_details]
#
# # Required [boolean]: Is the macro deterministic?
# deterministic =
#
# # Required [boolean]: Does the macro cross-compile cleanly?
# is_cross_compile_clean =
